*********************Reading data from file on Presentation Server
REPORT Z31_FH1.

PARAMETERS: p_file TYPE localfile.
DATA lv_file TYPE string.

TYPES: BEGIN OF str,
  carrid TYPE s_carr_id,
  carrname TYPE s_carrname,
  END OF str.
DATA: wa TYPE str,
      itab TYPE TABLE OF str.

AT SELECTION-SCREEN on VALUE-REQUEST FOr p_file.

CALL FUNCTION 'F4_FILENAME'     "This FM gives the pop-up of the file explorer and returns the path of the chosen file.
 EXPORTING
   PROGRAM_NAME        = SYST-CPROG
   DYNPRO_NUMBER       = SYST-DYNNR
   FIELD_NAME          = ' '
 IMPORTING
   FILE_NAME           =  p_file
          .

START-OF-SELECTION.
lv_file = p_file.
CALL FUNCTION 'GUI_UPLOAD'
  EXPORTING
    filename                      = lv_file
*   FILETYPE                      = 'ASC'
   HAS_FIELD_SEPARATOR           = 'X'
*   HEADER_LENGTH                 = 0
*   READ_BY_LINE                  = 'X'
*   DAT_MODE                      = ' '
*   CODEPAGE                      = ' '
*   IGNORE_CERR                   = ABAP_TRUE
*   REPLACEMENT                   = '#'
*   CHECK_BOM                     = ' '
*   VIRUS_SCAN_PROFILE            =
*   NO_AUTH_CHECK                 = ' '
* IMPORTING
*   FILELENGTH                    =
*   HEADER                        =
  tables
    data_tab                      = itab
          .

LOOP AT itab INTO wa.
  WRITE: / wa-carrid,
           wa-carrname.
ENDLOOP.









***************************Writing data into file on Presentation Server
REPORT z31_fh2.

PARAMETERS: p_carrid TYPE s_carr_id.

TYPES: BEGIN OF str,
         carrid  TYPE s_carr_id,
         connid  TYPE s_conn_id,
         fltime  TYPE s_fltime,
         deptime TYPE s_dep_time,
       END OF str.
DATA: wa   TYPE str,
      itab TYPE TABLE OF str.

SELECT carrid connid fltime deptime
  FROM spfli
  INTO TABLE itab
where carrid = p_carrid.

CALL FUNCTION 'GUI_DOWNLOAD'
  EXPORTING
*   BIN_FILESIZE                    =
    filename                        = 'C:\Users\M01854\OneDrive - Uniper SE\Desktop\airline_schedule.txt'
*   FILETYPE                        = 'ASC'
*   APPEND                          = ' '
   WRITE_FIELD_SEPARATOR           = 'X'
*   HEADER                          = '00'
*   TRUNC_TRAILING_BLANKS           = ' '
* IMPORTING
*   FILELENGTH                      =
  tables
    data_tab                        = itab   .









***********************Writing Data into File on SAP Server
REPORT Z31_FH3.

PARAMETERS: p_carrid TYPE s_carr_id.

DATA lv_filename(20) TYPE c VALUE '/tmp/airline.txt'. "Declared the SAP directory in which we write the data into File
DATA lv_string TYPE string.

TYPES: BEGIN OF str,
         carrid  TYPE s_carr_id,
         connid  TYPE s_conn_id,
         deptime TYPE s_dep_time,
       END OF str.
DATA: wa   TYPE str,
      itab TYPE TABLE OF str.

SELECT carrid connid deptime
  FROM spfli
  INTO TABLE itab
where carrid = p_carrid.

OPEN DATASET lv_filename FOR OUTPUT IN TEXT MODE ENCODING DEFAULT.
IF SY-SUBRC = 0.
  LOOP AT itab INTO wa.
    CONCATENATE wa-carrid wa-connid wa-deptime INTO lv_string SEPARATED BY space.
    TRANSFER lv_string TO lv_filename.
  ENDLOOP.
  CLOSE DATASET lv_filename.
ENDIF.











*************************READING DATA FROM A FILE ON SAP SERVER
REPORT Z31_FH4.

DATA lv_filename(20) TYPE c VALUE '/tmp/airline.txt'. "Declared the SAP directory in which we write the data into File
DATA lv_string TYPE string.

TYPES: BEGIN OF str,
         carrid  TYPE s_carr_id,
         connid  TYPE s_conn_id,
         deptime TYPE s_dep_time,
       END OF str.
DATA: wa   TYPE str,
      itab TYPE TABLE OF str.


OPEN DATASET lv_filename FOR INPUT IN TEXT MODE ENCODING DEFAULT.
IF SY-SUBRC = 0.
  DO.
    READ DATASET lv_filename INTO lv_string.
    IF sy-subrc <> 0.
      EXIT.
    ENDIF.
    SPLIT lv_string AT space INTO wa-carrid wa-connid wa-deptime.
    APPEND wa to itab.
    CLEAr wa.
  ENDDO.
  CLOSE DATASET lv_filename.
ENDIF.

LOOP AT itab INTO wa.
  WRITE: / wa-carrid,
           wa-connid,
           wa-deptime.
ENDLOOP.






*&---------------------------------------------------------------------*
*& Report Z31_FILE_HANDLING
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT z31_file_handling.

PARAMETERS:fullpath TYPE string.
DATA: lv_path  TYPE string,
        p_file   TYPE string.

TYPES: BEGIN OF str_sfli,
         carrid TYPE s_carr_id,
         connid TYPE s_conn_id,
         fldate TYPE s_date,
         price  TYPE s_price,
       END OF str_sfli.
DATA: lt_data TYPE TABLE OF str_sfli.

TYPES: BEGIN OF str_head,
         column_name(10) TYPE c,
       END OF str_head.
DATA: lt_header TYPE TABLE OF str_head.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR fullpath.
  CALL METHOD cl_gui_frontend_services=>file_save_dialog
    EXPORTING
*     window_title              =
      default_extension         = 'XLSX'
*     default_file_name         =
*     with_encoding             =
*     file_filter               =
*     initial_directory         =
*     prompt_on_overwrite       = 'X'
    CHANGING
      filename                  = p_file
      path                      = lv_path
      fullpath                  = fullpath
*     user_action               =
*     file_encoding             =
    EXCEPTIONS
      cntl_error                = 1
      error_no_gui              = 2
      not_supported_by_gui      = 3
      invalid_default_file_name = 4
      OTHERS                    = 5.
  IF sy-subrc <> 0.
*  Implement suitable error handling here
  ENDIF.


START-OF-SELECTION.
  SELECT carrid connid fldate price
     FROM sflight
    INTO TABLE lt_data.

  APPEND 'CARRID' TO lt_header.
  APPEND 'CONNID' TO lt_header.
  APPEND 'FLDATE' TO lt_header.
  APPEND 'PRICE' TO lt_header.

  CALL FUNCTION 'GUI_DOWNLOAD'
    EXPORTING
*     BIN_FILESIZE            =
      filename                = fullpath
      filetype                = 'DAT'
*     APPEND                  = ' '
*     WRITE_FIELD_SEPARATOR   = ' '
*     HEADER                  = '00'
*     TRUNC_TRAILING_BLANKS   = ' '
*     WRITE_LF                = 'X'
*     COL_SELECT              = ' '
*     COL_SELECT_MASK         = ' '
*     DAT_MODE                = ' '
*     CONFIRM_OVERWRITE       = ' '
*     NO_AUTH_CHECK           = ' '
*     CODEPAGE                = ' '
*     IGNORE_CERR             = ABAP_TRUE
*     REPLACEMENT             = '#'
*     WRITE_BOM               = ' '
*     TRUNC_TRAILING_BLANKS_EOL       = 'X'
*     WK1_N_FORMAT            = ' '
*     WK1_N_SIZE              = ' '
*     WK1_T_FORMAT            = ' '
*     WK1_T_SIZE              = ' '
*     WRITE_LF_AFTER_LAST_LINE        = ABAP_TRUE
*     SHOW_TRANSFER_STATUS    = ABAP_TRUE
*     VIRUS_SCAN_PROFILE      = '/SCET/GUI_DOWNLOAD'
* IMPORTING
*     FILELENGTH              =
    TABLES
      data_tab                = lt_data
      fieldnames              = lt_header
    EXCEPTIONS
      file_write_error        = 1
      no_batch                = 2
      gui_refuse_filetransfer = 3
      invalid_type            = 4
      no_authority            = 5
      unknown_error           = 6
      header_not_allowed      = 7
      separator_not_allowed   = 8
      filesize_not_allowed    = 9
      header_too_long         = 10
      dp_error_create         = 11
      dp_error_send           = 12
      dp_error_write          = 13
      unknown_dp_error        = 14
      access_denied           = 15
      dp_out_of_memory        = 16
      disk_full               = 17
      dp_timeout              = 18
      file_not_found          = 19
      dataprovider_exception  = 20
      control_flush_error     = 21
      OTHERS                  = 22.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.






*&---------------------------------------------------------------------*
*& Report Z31_FILE_HANDLING
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT z31_file_handling.

TYPES: BEGIN OF str_data,
         carrid(10) TYPE c,
         connid(10) TYPE c,
         fldate(10) TYPE c,
         price(10)  TYPE c,
       END OF str_data.
DATA: lt_final TYPE TABLE OF str_data,
      ls_final TYPE str_data.

PARAMETERS: p_file TYPE localfile.

DATA lt_data TYPE TABLE OF alsmex_tabline.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_file.
  CALL FUNCTION 'F4_FILENAME'
    EXPORTING
      program_name  = syst-cprog
      dynpro_number = syst-dynnr
      field_name    = ' '
    IMPORTING
      file_name     = p_file.


START-OF-SELECTION.
*  CALL FUNCTION 'TEXT_CONVERT_XLS_TO_SAP'   "Converts Excel Data to Internal Table Data
*    EXPORTING
**     I_FIELD_SEPERATOR    =
**     I_LINE_HEADER        =
*      i_tab_raw_data       = lt_raw_data
*      i_filename           = p_file
*    TABLES
*      i_tab_converted_data = lt_data
**   EXCEPTIONS
**     CONVERSION_FAILED    = 1
**     OTHERS               = 2
*    .
*  IF sy-subrc <> 0.
** Implement suitable error handling here
*  ENDIF.
*
*  DELETE lt_data INDEX 1.

  CALL FUNCTION 'ALSM_EXCEL_TO_INTERNAL_TABLE'
    EXPORTING
      filename                = p_file
      i_begin_col             = 1
      i_begin_row             = 2
      i_end_col               = 9999
      i_end_row               = 9999
    TABLES
      intern                  = lt_data
    EXCEPTIONS
      inconsistent_parameters = 1
      upload_ole              = 2
      OTHERS                  = 3.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.

  LOOP AT lt_data INTO DATA(ls_data).
    CASE ls_data-col.
      WHEN 1.
        ls_final-carrid = ls_data-value.
      WHEN 2.
        ls_final-connid = ls_data-value.
      WHEN 3.
        ls_final-fldate = | { ls_data-value+6(4) }{ ls_data-value+3(2) }{ ls_data-value+0(2) }|.
      WHEN 4.
        ls_final-price = ls_data-value.
    ENDCASE.
    APPEND ls_final TO lt_final.
  ENDLOOP.

  cl_demo_output=>display( lt_final ).

