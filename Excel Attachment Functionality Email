*&---------------------------------------------------------------------*
*& Report Z31_EXCEL_EMAIL
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT Z31_EXCEL_EMAIL.

DATA: LT_BINARY_TAB TYPE SOLIX_TAB. "Table Type to store Binary Data

DATA: LO_BCS           TYPE REF TO CL_BCS,
      LO_SAPUSER       TYPE REF TO CL_SAPUSER_BCS,
      LO_EXTERNAL_USER TYPE REF TO CL_CAM_ADDRESS_BCS,
      LO_DOCUMENT      TYPE REF TO CL_DOCUMENT_BCS.

DATA: LT_TEXT               TYPE SOLI_TAB,
      LS_TEXT               TYPE SOLI,
      lv_attachment_name    TYPE SO_OBJ_DES,
      lt_attachment_header  TYPE soli_tab,
      ls_attachment_header  TYPE SOLI,
      LV_RESULT             TYPE OS_BOOLEAN.

CLASS ZCL_ITAB_TO_EXCEL DEFINITION FINAL.

  PUBLIC SECTION.
    METHODS:
      ITAB_TO_XSTRING
        IMPORTING IR_DATA_REF       TYPE REF TO DATA
        RETURNING VALUE(RV_XSTRING) TYPE XSTRING.
ENDCLASS.

CLASS ZCL_ITAB_TO_EXCEL IMPLEMENTATION.
  METHOD ITAB_TO_XSTRING.

    FIELD-SYMBOLS: <FS_DATA> TYPE ANY TABLE.

    CLEAR RV_XSTRING.
    ASSIGN IR_DATA_REF->* TO <FS_DATA>.

    TRY.
        CL_SALV_TABLE=>FACTORY(
          IMPORTING R_SALV_TABLE = DATA(LO_TABLE)
          CHANGING  T_TABLE      = <FS_DATA> ).

        DATA(LT_FCAT) =
          CL_SALV_CONTROLLER_METADATA=>GET_LVC_FIELDCATALOG(
            R_COLUMNS      = LO_TABLE->GET_COLUMNS( )
            R_AGGREGATIONS = LO_TABLE->GET_AGGREGATIONS( ) ).

        DATA(LO_RESULT) =
          CL_SALV_EX_UTIL=>FACTORY_RESULT_DATA_TABLE(
            R_DATA         = IR_DATA_REF
            T_FIELDCATALOG = LT_FCAT ).

        CL_SALV_BS_TT_UTIL=>IF_SALV_BS_TT_UTIL~TRANSFORM(
          EXPORTING
            XML_TYPE      = IF_SALV_BS_XML=>C_TYPE_XLSX
            XML_VERSION   = CL_SALV_BS_A_XML_BASE=>GET_VERSION( )
            R_RESULT_DATA = LO_RESULT
            XML_FLAVOUR   = IF_SALV_BS_C_TT=>C_TT_XML_FLAVOUR_EXPORT
            GUI_TYPE      = IF_SALV_BS_XML=>C_GUI_TYPE_GUI
          IMPORTING
            XML           = RV_XSTRING ).
      CATCH CX_ROOT.
        CLEAR RV_XSTRING.
    ENDTRY.
  ENDMETHOD.
ENDCLASS.


START-OF-SELECTION.
  "Get Data
  SELECT * FROM SFLIGHT INTO TABLE @DATA(LT_DATA).
  GET REFERENCE OF LT_DATA INTO DATA(LO_DATA_REF). "Getting The Reference of Data Internal Table
  DATA(LV_XSTRING) = NEW ZCL_ITAB_TO_EXCEL( )->ITAB_TO_XSTRING( LO_DATA_REF ). "Excel XSTRING of Data Internal Table

  "Another Simplest Way to get Excel Xstring of Data Internal Table
**  TRY.
*  CALL METHOD cl_salv_table=>factory
**    EXPORTING
**      list_display   = IF_SALV_C_BOOL_SAP=>FALSE
**      r_container    =
**      container_name =
*    IMPORTING
*      r_salv_table   = lo_alv
*    CHANGING
*      t_table        = LT_DATA
*      .
**   CATCH cx_salv_msg .
**  ENDTRY.
*
*  data(LV_XSTRING) = lo_alv->to_xml( if_salv_bs_xml=>c_type_xlsx ).


*1) Convert the XSTRING Format to Binary Format
  CALL FUNCTION 'SCMS_XSTRING_TO_BINARY'    "Converting BIN_FILE from XSTRING Format to Binary Format
    EXPORTING
      BUFFER     = LV_XSTRING        "Pass the BIN_FILE of the File(PDF/EXCEL)
*     APPEND_TO_TABLE       = ' '
* IMPORTING
*     OUTPUT_LENGTH         =
    TABLES
      BINARY_TAB = LT_BINARY_TAB.          " Getting Binary Format of BIN_FILE


*2)	CREATE THE SEND REQUEST

  TRY.
      CALL METHOD CL_BCS=>CREATE_PERSISTENT  "Creating the Send Request.
        RECEIVING
          RESULT = LO_BCS.     "Returing the Object which is of CL_BCS
    CATCH CX_SEND_REQ_BCS .
  ENDTRY.


*3) CREATE THE SAP USER RECIPIENT
  DATA(LV_SAPID) = SY-UNAME.
  TRY.
      CALL METHOD CL_SAPUSER_BCS=>CREATE  "Creating SAP User Recipient
        EXPORTING
          I_USER = LV_SAPID
        RECEIVING
          RESULT = LO_SAPUSER.   "Returing Recipient as an Object which is of CL_SAPUSER_BCS
    CATCH CX_ADDRESS_BCS .
  ENDTRY.

*5)	Add the Recipient

  TRY.
      CALL METHOD LO_BCS->ADD_RECIPIENT  "Adding Recipient
        EXPORTING
          I_RECIPIENT = LO_SAPUSER
*         i_express   =
*         i_copy      =
*         i_blind_copy =
*         i_no_forward =
        .
    CATCH CX_SEND_REQ_BCS .
  ENDTRY.

**4) Create the External Recipient
*
*    TRY.
*        CALL METHOD CL_CAM_ADDRESS_BCS=>CREATE_INTERNET_ADDRESS  "Creating External Recipient
*          EXPORTING
*            I_ADDRESS_STRING = 'meraj.zafir@dxc.com'      "Provide Ineternet Email Address
**           i_address_name   =
**           i_incl_sapuser   =
*          RECEIVING
*            RESULT           = LO_EXTERNAL_USER.   "Returing Recipient as an Object which is of cl_cam_address_bcs
*      CATCH CX_ADDRESS_BCS .
*    ENDTRY.
*
**5)  Add the Recipient
*
*    TRY.
*        CALL METHOD LO_BCS->ADD_RECIPIENT  "Adding Recipient
*          EXPORTING
*            I_RECIPIENT = LO_EXTERNAL_USER
**           i_express   =
**           i_copy      =
**           i_blind_copy =
**           i_no_forward =
*          .
*      CATCH CX_SEND_REQ_BCS .
*    ENDTRY.


*6) CREATE THE DOCUMENT
  LS_TEXT-LINE = 'Hello'.
  APPEND LS_TEXT TO LT_TEXT.
  CLEAR LS_TEXT.

  APPEND SPACE TO LT_TEXT.

  LS_TEXT-LINE = 'Please Find Attached Document'.
  APPEND LS_TEXT TO LT_TEXT.
  CLEAR LS_TEXT.

  APPEND SPACE TO LT_TEXT.

  LS_TEXT-LINE = 'Br, Meraj.'.
  APPEND LS_TEXT TO LT_TEXT.
  CLEAR LS_TEXT.

  TRY.
      CALL METHOD CL_DOCUMENT_BCS=>CREATE_DOCUMENT  "Creating the Document
        EXPORTING
          I_TYPE    = 'RAW'           "We have to provide Document Class
          I_SUBJECT = 'Testing Excel Attachment Functionality Email'
*         i_length  =
*         i_language     = SPACE
*         i_importance   =
*         i_sensitivity  =
          I_TEXT    = LT_TEXT      "Mail Body Content
*         i_hex     =
*         i_header  =
*         i_sender  =
*         iv_vsi_profile =
        RECEIVING
          RESULT    = LO_DOCUMENT.    "Returing an Object of cl_document_bcs
    CATCH CX_DOCUMENT_BCS .
  ENDTRY.

*7) ADD THE ATTACHMENT
  CONCATENATE 'EXPORT_' sy-datum '.xlsx' INTO lv_attachment_name.   "Attachemt File Name
  CONCATENATE '&SO_FILENAME=' lv_attachment_name  INTO ls_attachment_header.
  APPEND ls_attachment_header TO lt_attachment_header.
  TRY.
      CALL METHOD LO_DOCUMENT->ADD_ATTACHMENT       "Adding the Attachment
        EXPORTING
          I_ATTACHMENT_TYPE    = 'XLS'
          I_ATTACHMENT_SIZE    = CONV #( XSTRLEN( LV_XSTRING ) )
          I_ATTACHMENT_SUBJECT = lv_attachment_name
          I_ATTACHMENT_HEADER  = lt_attachment_header "VALUE #( ( line = 'Flights.xlsx' ) )
          I_ATT_CONTENT_HEX    = LT_BINARY_TAB.     "Passing the Binary Format of BIN_FILE
    CATCH CX_DOCUMENT_BCS .
  ENDTRY.

*8) SETS THE DOCUMENT TO BE SENT.
  TRY.
      CALL METHOD LO_BCS->SET_DOCUMENT    "Linking the CL_DOCUMENT_BCS to CL_BCS
        EXPORTING
          I_DOCUMENT = LO_DOCUMENT.    "Passing the Object of cl_document_bcs
    CATCH CX_SEND_REQ_BCS .
  ENDTRY.

*9) Activate Immediate Sending
  TRY.
      CALL METHOD LO_BCS->SET_SEND_IMMEDIATELY
        EXPORTING
          I_SEND_IMMEDIATELY = 'X'.
    CATCH CX_SEND_REQ_BCS .
  ENDTRY.

*10) Send
  TRY.
      CALL METHOD LO_BCS->SEND
*  EXPORTING
*    i_with_error_screen = SPACE
        RECEIVING
          RESULT = LV_RESULT.
    CATCH CX_SEND_REQ_BCS .
  ENDTRY.

*11) Commit Work --> It is only required if we are sending the mail to external recipient.
  IF LV_RESULT IS NOT INITIAL.
    COMMIT WORK.
  ENDIF.
